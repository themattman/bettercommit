#!/usr/bin/env bash
#
# Enforce Framework's Invariants - Don't Push Certain Files
#
# Author:  Mathew Kneiser
# Date:    08/04/2015
# Purpose: Don't let users push useless files to repo
#
# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

IFS=' '
while read local_ref local_sha remote_ref remote_sha
do
	if [[ "$local_sha" = $z40 ]]; then
		# Handle delete
        :
	else
		if [[ "$remote_sha" = $z40 ]]; then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi
        # Debug
        # echo "local_ref:  [${local_ref}]"
        # echo "local_sha:  [${local_sha}]"
        # echo "remote_ref: [${remote_ref}]"
        # echo "remote_sha: [${remote_sha}]"

        no_files=0
        modified_files=$(git diff --name-only "$range" | tr '\n' ' ' 2>/dev/null) || no_files=1
        if [[ "${no_files}" -eq 1 ]]; then
            echo "File check...OK!"
        else
            # Check for certain files
            forbidden_files=(
                'logs/bettercommit.conf'
                'logs/bettercommit.log'
                'logs/bettercommit.state'
                'template/bettercommit/current'
                'template/bettercommit/head_sha.txt'
                'template/bettercommit/version.txt'
                'template/hooks/applypatch-msg'
                'template/hooks/pre-applypatch'
                'template/hooks/post-applypatch'
                'template/hooks/pre-commit'
                'template/hooks/prepare-commit-msg'
                'template/hooks/post-commit'
                'template/hooks/pre-rebase'
                'template/hooks/post-checkout'
                'template/hooks/post-merge'
                'template/hooks/pre-push'
                'template/hooks/pre-receive'
                'template/hooks/update'
                'template/hooks/post-receive'
                'template/hooks/post-update'
                'template/hooks/pre-auto-gc'
                'template/hooks/post-rewrite'
            )
            # Debug
            # echo "forbidden: [${forbidden_files[*]}]"

            for ffile in ${forbidden_files[*]}; do
                for mfile in ${modified_files}; do
                    # Debug
                    # echo "${ffile} - ${mfile}"
                    if [[ "${ffile}" = "${mfile}" ]]; then
                        echo "${0}: Error: file [${mfile}] is forbidden." >&2 && exit 1
                    fi
                done
            done
            echo "File check...OK!"
        fi
	fi
done

exit 0
